Problem Statement:-
Given an array A where each element denotes the height of blocks, calculate the total volume of water that can be trapped when it rains. 

Note: one cubic block has a volume of 1 unit.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Naive Approach
The simple solution is to traverse the array and for each array element find the maximum height on the left and right side of the element in the array. Take the difference of the current element from the minimum of those two heights and add it to the answer.

Analysis
Time Complexity: O(n2)
Auxiliary Space Complexity: O(1)

Code:-

class Solution {
	int volumeOfTrappedRainWater(int[] heights) {
	    int n = heights.length;
		int totalRainWater = 0;
		for (int i = 0; i < n; i++){
			int maxLeft = 0, maxRight = 0;
			for (int j = 0; j <= i; j++){
				maxLeft = Math.max (maxLeft, heights[j]);
			}
			for (int j = i; j < n; j++) {
				maxRight = Math.max (maxRight, heights[j]);
			}
			totalRainWater += Math.min (maxRight, maxLeft) - heights[i];
		}
		return totalRainWater;
	}
}

//2ND APPROACH USING STACK:-(LEARN IT AFTER DOING STACK)

//Another Approach:-TWP POINTERS.
This problem can be solved using constant space with the help of two pointers approach.

Take two pointers say left and right, pointing to the start and end of the given array and do the following while left is less than or equal to right.
If the array value at the left index is less than or equal to the array value at the right index then add the effective volume trapped at the left index and increment the left index. 
Otherwise, add the effective volume at the right index and decrement the right index. 
Also, keep updating the maximum height on the left and right sides to compute the effective volume at each index.
Analysis
Time Complexity: O(n)
Auxiliary Space Complexity: O(1)

class Solution {
	int volumeOfTrappedRainWater(int[] heights) {
		int left = 0; 
		int right = heights.length - 1;
		int volume = 0;
		int maxLeft = 0, maxRight = 0;
		while (left <= right) {
			if (heights[left] <= heights[right]) {
				if (heights[left] >= maxLeft) {
					maxLeft = heights[left];
				} else {
					volume += maxLeft - heights[left];
				}
				left++;
			} else {
				if (heights[right] >= maxRight) {
					maxRight = heights[right];
				} else {
					volume += maxRight - heights[right];
				}
				right--;
			}
		}
		return volume;
	}
}