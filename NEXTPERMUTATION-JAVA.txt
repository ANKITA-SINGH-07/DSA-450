NEXT PERMUTATION:-

Given an array A[] of N distinct integers. The task is to return the lexicographically greater permutation than the given arrangement. 
If no such arrangement is possible, return the array sorted in non-decreasing order.

Examples:

Input: A[] = [1, 2, 3]
Output: [1, 3, 2]
Explanation: The lexicographically greater permutation than A[] is [1, 3, 2]

Input:  A[] = [4, 3, 2, 1]

Output: [1, 2, 3, 4]

Approach 1: Brute Force
A simple approach to solve this problem is to generate all the permutations of the given array and return the permutation which is just greater than the given array.
But this approach is very naive and wonâ€™t work for N > 10.


Time Complexity: O(N * N!), since total possible permutations are N!
Space Complexity: O(N), since the permutation is stored.



Approach 2: Linear Solution:

Find the first index, say idx, where A[i] < A[i + 1].
Find the first index, say ind, where A[i] > A[idx]
Swap A[idx] and A[ind].
Reverse all elements from idx + 1 till the end of the array.

Algorithm :

Traverse the array from end and find the first index, idx such that A[i] < A[i + 1].
Again traverse the array from the end and find the first index, ind such that A[i] > A[idx].
Swap A[idx] and A[ind].
Reverse the array from idx + 1 till N.
The base case would be, if the array is in decreasing order, no next permutation will be found, hence return the array in sorted order.


public void nextPermutation(int[] A) {
  if (A == null || A.length <= 1) return;
  int i = A.length - 2;
  while (i >= 0 && A[i] >= A[i + 1]) i--; 
  if (i >= 0) { 
    int j = A.length - 1; 
    while (A[j] <= A[i]) j--; 
    swap(A, i, j); 
  }
  reverse(A, i + 1, A.length - 1); 
}
 
public void swap(int[] A, int i, int j) {
  int tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
}
 
public void reverse(int[] A, int i, int j) {
  while (i < j) swap(A, i++, j--);
}

//TIME COMPLEXITY:-
O(N) :-LINEAR TIME TO FIND LONGEST DECREASING SEQUENCE
:-LINEAR TIME TO SWAP
:-LINEAR TIME TO REVERSE

SO 3O(N):-3 IGNORED SO O(N).

SPACE COMPLEXITY:O(1)